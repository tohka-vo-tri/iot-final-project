#include "utils/fingerprint_utils.h"
#include <Adafruit_Fingerprint.h>
#include "events/input_mode.h"
#include "utils/lcd_utils.h"
HardwareSerial mySerial(2);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

uint8_t registerID = 0;
int enrollStep = 0;

void init_fingerprint_sensor()
{
    mySerial.begin(57600, SERIAL_8N1, FINGERPRINT_RX, FINGERPRINT_TX);
    finger.begin(57600);

    if (finger.verifyPassword())
    {
        Serial.println("‚úÖ Fingerprint sensor initialized successfully!");
    }
    else
    {
        Serial.println("‚ùå Failed to initialize fingerprint sensor!");
        while (1)
            ;
    }

    // Serial.println("Deleting all stored fingerprints...");
    // if (finger.emptyDatabase() == FINGERPRINT_OK)
    // {
    //     Serial.println("All fingerprints have been deleted successfully!");
    // }
    // else
    // {
    //     Serial.println("Error deleting fingerprints!");
    // }
}

uint8_t get_next_available_id()
{
    for (uint8_t id = 1; id < 127; id++)
    {
        if (finger.loadModel(id) != FINGERPRINT_OK)
        {
            return id;
        }
    }
    return 0;
}

void enroll_fingerprint() {
    if (registerID == 0) {
        registerID = get_next_available_id();
        if (registerID == 0) {
            Serial.println("‚ùå No available ID slots for fingerprint registration!");
            isRegisterMode = false;
            return;
        }
        Serial.print("üîç Assigned ID: ");
        Serial.println(registerID);
    }

    // Y√™u c·∫ßu ng∆∞·ªùi d√πng ƒë·∫∑t ng√≥n tay l·∫ßn 1
    Serial.println("üü¢ Place your finger flat on the sensor...");
    while (finger.getImage() != FINGERPRINT_OK) {
        delay(100); // Ch·ªù ng∆∞·ªùi d√πng ƒë·∫∑t ng√≥n tay
    }
    Serial.println("‚úÖ Finger detected.");

    if (finger.image2Tz(1) != FINGERPRINT_OK) {
        Serial.println("‚ùå Failed to process fingerprint! Please try again.");
        registerID = 0; // Reset ID n·∫øu th·∫•t b·∫°i
        return;
    }
    Serial.println("‚úÖ Fingerprint image converted.");

    // Y√™u c·∫ßu ng∆∞·ªùi d√πng th√°o ng√≥n tay
    Serial.println("üîÑ Remove your finger and place it again from a different angle...");
    while (finger.getImage() != FINGERPRINT_NOFINGER) {
        delay(100); // Ch·ªù ng∆∞·ªùi d√πng th√°o ng√≥n tay
    }

    // Y√™u c·∫ßu ng∆∞·ªùi d√πng ƒë·∫∑t ng√≥n tay l·∫ßn 2
    Serial.println("üü¢ Place the same finger on the sensor at a slightly different angle...");
    while (finger.getImage() != FINGERPRINT_OK) {
        delay(100); // Ch·ªù ng∆∞·ªùi d√πng ƒë·∫∑t ng√≥n tay l·∫°i
    }
    Serial.println("‚úÖ Finger detected again.");

    if (finger.image2Tz(2) != FINGERPRINT_OK) {
        Serial.println("‚ùå Failed to process the second fingerprint image! Please try again.");
        registerID = 0; // Reset ID n·∫øu th·∫•t b·∫°i
        return;
    }
    Serial.println("‚úÖ Second fingerprint image converted.");

    // T·∫°o m·∫´u v√¢n tay
    if (finger.createModel() != FINGERPRINT_OK) {
        Serial.println("‚ùå Failed to create fingerprint model! Please try again.");
        registerID = 0; // Reset ID n·∫øu th·∫•t b·∫°i
        return;
    }

    // Ki·ªÉm tra xem m·∫´u v√¢n tay n√†y c√≥ kh·ªõp v·ªõi b·∫•t k·ª≥ m·∫´u n√†o ƒë√£ l∆∞u tr·ªØ hay kh√¥ng
    Serial.println("üîç Checking if this fingerprint already exists in the database...");
    if (finger.fingerFastSearch() == FINGERPRINT_OK) {
        Serial.print("‚ùå Fingerprint already exists with ID: ");
        Serial.println(finger.fingerID);
        clear_display();
        print_to_lcd(0, "Finger Exists");
        print_to_lcd(1, "Try Another Finger");
        delay(2000);
        registerID = 0; // Reset ID n·∫øu tr√πng
        return;
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y m·∫´u tr√πng, ti·∫øn h√†nh l∆∞u tr·ªØ
    if (finger.storeModel(registerID) == FINGERPRINT_OK) {
        Serial.print("üéâ Fingerprint stored successfully with ID: ");
        Serial.println(registerID);
    } else {
        Serial.println("‚ùå Failed to store fingerprint! Please try again.");
        registerID = 0; // Reset ID n·∫øu l∆∞u th·∫•t b·∫°i
        return;
    }

    enrollStep = 0; 
    isRegisterMode = false; 
}
int get_fingerprint()
{
    int result = finger.getImage();
    if (result == FINGERPRINT_NOFINGER)
    {
        return -2; // Kh√¥ng c√≥ ng√≥n tay, tho√°t
    }
    if (result != FINGERPRINT_OK)
    {
        Serial.println("‚ö†Ô∏è Fingerprint image capture failed. Please ensure proper finger placement.");
        return -1; // L·ªói khi ƒë·ªçc h√¨nh ·∫£nh
    }

    result = finger.image2Tz(1);
    if (result != FINGERPRINT_OK)
    {
        Serial.println("‚ö†Ô∏è Fingerprint image conversion failed. Please try again.");
        return -1; // L·ªói chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh
    }

    result = finger.fingerFastSearch();
    if (result == FINGERPRINT_OK) {
        Serial.print("üîç Fingerprint found with ID: ");
        Serial.println(finger.fingerID);
        return finger.fingerID; // Tr·∫£ v·ªÅ ID c·ªßa v√¢n tay ƒë√£ ƒëƒÉng k√Ω
    } else {
        Serial.println("üîç No matching fingerprint found.");
        return 0; // Kh√¥ng t√¨m th·∫•y v√¢n tay
    }
}
